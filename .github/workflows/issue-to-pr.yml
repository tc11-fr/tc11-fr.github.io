name: Issue to Markdown PR

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: preview-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  issue-to-pr:
    if: contains(join(github.event.issue.labels.*.name, ','), 'contenu')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Générer le fichier Markdown depuis l’issue
        id: generate
        run: |
          TITLE="$(jq -r '.issue.title' "$GITHUB_EVENT_PATH" | sed 's/^\[Page\] //')"
          BODY="$(jq -r '.issue.body' "$GITHUB_EVENT_PATH")"
          extract_block() {
            awk -v header="$1" '
              $0 ~ header {
                getline
                block = ""
                while (getline && $0 !~ /^### - /) {
                  block = block $0 "\n"
                }
                print block
                exit
              }
            '
          }
          TITRE="$(echo "$BODY" | extract_block '^### - Titre de la page' | sed '/^\s*$/d')"
          CONTENU="$(echo "$BODY" | extract_block '^### - Contenu.*' | sed '/^\s*$/d')"
          CATEGORIE="$(echo "$BODY" | extract_block '^### - Catégorie' | sed '/^\s*$/d')"
          LABELBOUTON="$(echo "$BODY" | extract_block '^### - Label du bouton.*' | sed '/^\s*$/d')"

          DATE="$(date +%F)"
          SLUG="$(echo "$TITRE" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')"
          FOLDERNAME="content/posts/$DATE-$SLUG"
          FILENAME="$FOLDERNAME/index.md"
          mkdir -p "$FOLDERNAME"
          cat > "$FILENAME" <<EOF
          ---
          title: "$TITRE"
          category: "$CATEGORIE"
          date: "$DATE"
          layout: layouts/post.html
          labelDetails: "$LABELBOUTON"
          ---
          $CONTENU
          EOF

          BRANCH="issue-page-${{ github.event.issue.number }}"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
          echo "folder_path=$FOLDERNAME" >> "$GITHUB_OUTPUT"
          echo "file_path=$FILENAME" >> "$GITHUB_OUTPUT"
          echo "folder_url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/tree/$BRANCH/$FOLDERNAME" >> "$GITHUB_OUTPUT"
          echo "file_url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/$BRANCH/$FILENAME" >> "$GITHUB_OUTPUT"
          echo "upload_url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/upload/$BRANCH/$FOLDERNAME" >> "$GITHUB_OUTPUT"

      - name: Créer / mettre à jour la Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Ajout d’une page depuis une issue"
          branch: ${{ steps.generate.outputs.branch }}
          title: "Ajout d’une page : ${{ github.event.issue.title }}"
          add-paths: content/posts/**/*.md
          body: |
            Page générée automatiquement depuis l’issue #${{ github.event.issue.number }}.

            **Dossier du post :** [`${{ steps.generate.outputs.folder_path }}`](${{ steps.generate.outputs.folder_url }})  
            **Fichier :** [`index.md`](${{ steps.generate.outputs.file_url }})

            **Ajouter des images / pièces jointes (Roq les détecte automatiquement) :**  
            ➜ [Déposer des fichiers dans ce dossier](${{ steps.generate.outputs.upload_url }})

      # --- Déclencher le preview downstream sans artifact ---
      - name: Trigger preview via repository_dispatch
        if: ${{ steps.cpr.outputs.pull-request-number != '' }}
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ steps.cpr.outputs.pull-request-number }}
        with:
          script: |
            await github.repos.createDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'roq-preview',
              client_payload: { pr: Number(process.env.PR_NUMBER) }
            });
